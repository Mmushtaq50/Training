What are the changes done in java 8 for memory utilization?

PermGen--(JDK-7)
Metaspace--(JDK-8)


PermGen space situation (JDK-7)
•	This memory space is completely removed.
•	The PermSize and MaxPermSize JVM arguments are ignored and a warning is issued if present at start-up.

Metaspace memory allocation model (JDK_8)
•	Most allocations for the class metadata are now allocated out of native memory.
•	The classes that were used to describe class metadata have been removed.

Metaspace capacity
•	By default class metadata allocation is limited by the amount of available native memory (capacity will of course depend if you use a 32-bit JVM vs. 64-bit along with OS virtual memory availability).
•	A new flag is available (MaxMetaspaceSize), allowing you to limit the amount of native memory used for class metadata. If you don’t specify this flag, the Metaspace will dynamically re-size depending of the application demand at runtime.

Metaspace garbage collection
•	Garbage collection of the dead classes and class loaders is triggered once the class metadata usage reaches the “MaxMetaspaceSize”.
•	Proper monitoring & tuning of the Metaspace will obviously be required in order to limit the frequency or delay of such garbage collections. Excessive Metaspace garbage collections may be a symptom of classes, classloaders memory leak or inadequate sizing for your application.
Java heap space impact
•	Some miscellaneous data has been moved to the Java heap space. This means you may observe an increase of the Java heap space following a future JDK 8 upgrade.

Metaspace monitoring
•	Metaspace usage is available from the HotSpot 1.8 verbose GC log output.
•	Jstat & JVisualVM have not been updated at this point based on our testing with b75 and the old PermGen space references are still present.

