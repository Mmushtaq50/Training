Memory leak?

A Memory Leak is a situation when there are objects present in the heap that are no longer used, 
but the garbage collector is unable to remove them from memory and, thus they are unnecessarily maintained.

A memory leak is bad because it blocks memory resources and degrades system performance over time. 
And if not dealt with, the application will eventually exhaust its resources, finally terminating with a fatal java.lang.OutOfMemoryError.

There are two different types of objects that reside in Heap memory â€” referenced and unreferenced. 
Referenced objects are those who have still active references within the application whereas unreferenced objects don't have any active references.

The garbage collector removes unreferenced objects periodically, but it never collects the objects that 
are still being referenced. This is where memory leaks can occur:

Symptoms of memory leak:
Severe performance degradation when the application is continuously running for a long time
OutOfMemoryError heap error in the application
Spontaneous and strange application crashes
The application is occasionally running out of connection objects


Types of Memory Leaks in Java

--- Memory Leak Through static Fields

	The first scenario that can cause a potential memory leak is heavy use of static variables.

	In Java, static fields have a life that usually matches the entire lifetime of the running application (unless ClassLoader becomes eligible for garbage collection).

Prevention:
Minimize the use of static variables
When using singletons, rely upon an implementation that lazily loads the object instead of eagerly loading



---Through Unclosed Resources

	Whenever we make a new connection or open a stream, the JVM allocates memory for these resources. 
	A few examples include database connections, input streams, and session objects.

	Forgetting to close these resources can block the memory, thus keeping them out of the reach of GC. 
	This can even happen in case of an exception that prevents the program execution from reaching the 
	statement that's handling the code to close these resources.

	In either case, the open connection left from resources consumes memory, and if we don't deal with them, 
	they can deteriorate performance and may even result in OutOfMemoryError.

prevention:
Always use finally block to close resources
The code (even in the finally block) that closes the resources should not itself have any exceptions
When using Java 7+, we can make use of try-with-resources block

---Through finalize() Methods
	Use of finalizers is yet another source of potential memory leak issues. Whenever a class' finalize() method is 
	overridden, then objects of that class aren't instantly garbage collected. Instead, the GC queues them 
	for finalization, which occurs at a later point in time.

	Additionally, if the code written in finalize() method is not optimal and if the finalizer queue cannot keep 
	up with the Java garbage collector, then sooner or later, our application is destined to meet an OutOfMemoryError.
prevention:
We should always avoid finalizers


--- Interned Strings
	If we read a huge massive String object, and call intern() on that object, then it goes to the string pool, 
	which is located in PermGen (permanent memory) and will stay there as long as our application runs. This blocks the 
	memory and creates a major memory leak in our application.
prevention:
The simplest way to resolve this issue is by upgrading to latest Java version as String pool is moved to HeapSpace from Java version 7 onwards
If working on large Strings, increase the size of the PermGen space to avoid any potential OutOfMemoryErrors: