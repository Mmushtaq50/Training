3.What is Memory Leak and How to avoid it?	

---In general, a Java memory leak happens when an application unintentionally (due to logical errors in code) holds on to object references that are no longer required
---A memory leak is a situation where unused objects occupy unnecessary space in memory.
---Unused objects are typically removed by the Java Garbage Collector (GC) 
---Even After Garbage Collection in some cases, where objects are still being referenced, they are not eligible to be removed. As a result, these unused objects are unnecessarily maintained in memory
---Memory leaks block an access to resources and cause an application to         consume more memory over time, leading to degrading system performance.
---One common indication of a memory leak is the java.lang.OutOfMemoryError exception

	TYPES OF MEMORY LEAKS IN JAVA 
   1. Through static Fields
Excessive usage of static fields can potentially lead to a memory leak. --static fields usually remain in memory as long as the application is running.
   2. Unclosed Resources
Resources such as connections and streams utilize memory. If they are not closed, memory allocated to these resources is blocked and the GC is unable to free up this space.
URLConnection urlConnection = url.openConnection();
method opens a URL connection object but does not close it. Since the object is referenced even after it is no longer used, it continues to block memory and is not eligible for garbage collection.
	3. Improper equals() and hashCode() Implementations
Not writing proper overriding implementations   for equals() and hashcode() methods when creating a new class can potentially lead to memory leaks in Java.
Particularly the HashSet and HashMap classes use these methods for many operations, and it is best to carefully write correct implementations of these methods

How to Avoid Memory Leaks
1.	Release the session when it is no longer needed. ...
2.	Keep the time-out and time low for each session.
3.	Store only the necessary data in your HttpSession.
4.	Avoid using string concatenation.
5.	reboot the machine in order to clear out the memory
-You can use RAMMap to clear areas of memory negating the need to reboot the machine

How to detect a memory leak in Java
1. Using Memory Profilers -
Memory profilers are tools that can monitor memory usage and help detect memory leaks in an application.
Profilers can also help with analyzing how resources are allocated within an application, for example how much memory and CPU time is being used by each method.
There are several tools that can be used for memory profiling in Java. Some of the most commonly used ones are - Java VisualVM, JProfiler
2. Verbose Garbage Collection
To obtain a detailed trace of the Java GC, verbose garbage collection can be enabled.
 The following parameter can be added to the JVM configuration to enable verbose garbage collection:  -verbose:gc

3. Using Heap Dumps
Heap dumps provide a snapshot of heap memory of a Java application at a particular time.
They provide information on how many object instances are open and how much memory they consume. 
Heap dumps can help with analyzing how many objects are created in an application and if any of them are potentially causing any memory leaks.

